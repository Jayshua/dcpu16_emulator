#[derive(Copy, Clone, Debug, PartialEq)]
pub enum BasicOperation {
   Set,
   Add,
   Sub,
   Mul,
   Mli,
   Div,
   Dvi,
   Mod,
   Mdi,
   And,
   Bor,
   Xor,
   Shr,
   Asr,
   Shl,
   Ifb,
   Ifc,
   Ife,
   Ifn,
   Ifg,
   Ifa,
   Ifl,
   Ifu,
   Adx,
   Sbx,
   Sti,
   Std,
}


impl BasicOperation {
   pub fn decode(value: u16) -> Option<Self> {
      match value {
         0x01 => Some(BasicOperation::Set),
         0x02 => Some(BasicOperation::Add),
         0x03 => Some(BasicOperation::Sub),
         0x04 => Some(BasicOperation::Mul),
         0x05 => Some(BasicOperation::Mli),
         0x06 => Some(BasicOperation::Div),
         0x07 => Some(BasicOperation::Dvi),
         0x08 => Some(BasicOperation::Mod),
         0x09 => Some(BasicOperation::Mdi),
         0x0a => Some(BasicOperation::And),
         0x0b => Some(BasicOperation::Bor),
         0x0c => Some(BasicOperation::Xor),
         0x0d => Some(BasicOperation::Shr),
         0x0e => Some(BasicOperation::Asr),
         0x0f => Some(BasicOperation::Shl),
         0x10 => Some(BasicOperation::Ifb),
         0x11 => Some(BasicOperation::Ifc),
         0x12 => Some(BasicOperation::Ife),
         0x13 => Some(BasicOperation::Ifn),
         0x14 => Some(BasicOperation::Ifg),
         0x15 => Some(BasicOperation::Ifa),
         0x16 => Some(BasicOperation::Ifl),
         0x17 => Some(BasicOperation::Ifu),
         0x1a => Some(BasicOperation::Adx),
         0x1b => Some(BasicOperation::Sbx),
         0x1e => Some(BasicOperation::Sti),
         0x1f => Some(BasicOperation::Std),
         _ => None,
      }
   }
}